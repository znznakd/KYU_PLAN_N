문제 설명
n명의 권투선수가 권투 대회에 참여했고 각각 1번부터 n번까지 번호를 받았습니다. 권투 경기는 1대1 방식으로 진행이 되고, 만약 A 선수가 B 선수보다 실력이 좋다면 A 선수는 B 선수를 항상 이깁니다. 심판은 주어진 경기 결과를 가지고 선수들의 순위를 매기려 합니다. 하지만 몇몇 경기 결과를 분실하여 정확하게 순위를 매길 수 없습니다.

선수의 수 n, 경기 결과를 담은 2차원 배열 results가 매개변수로 주어질 때 정확하게 순위를 매길 수 있는 선수의 수를 return 하도록 solution 함수를 작성해주세요.

 

제한사항
선수의 수는 1명 이상 100명 이하입니다.
경기 결과는 1개 이상 4,500개 이하입니다.
results 배열 각 행 [A, B]는 A 선수가 B 선수를 이겼다는 의미입니다.
모든 경기 결과에는 모순이 없습니다.
 

 

입출력 예시
n	results	return
5	[[4,3], [4,2], [3,2], [1,2], [2,5]]	2
 

 

풀이 코드
최단거리를 구하는 문제는 아니지만, a -> b, b -> c 라면 a -> c 를 확정지을 수 있는 플로이드 와샬 알고리즘을 활용해 풀이했다.

먼저 2차원 테이블에 (행) 사람이 (열) 사람을 이긴 경우 1로 채워주고 플로이드 와샬의 삼중 반복문을 활용한다.

시작 ~ 중간을 거치는 값과 중간 ~ 끝을 거치는 값이 1이라면, 시작 사람이 끝 사람을 이겼다라는 것을 확실하게 알 수 있으므로 2차원 테이블 [시작사람][끝사람] 을 1로 채워준다. 이후 선수 수 만큼 반복문을 설정해서 테이블의 행렬을 탐색하며 시합 횟수를 판단한 뒤 확실하게 순위를 알 수 있는 선수 수를 증가시키면 된다.

모든 선수들과 시합을 해본 선수 만이 확실한 등수를 알 수 있기 때문에 result == n - 1 인 경우에만 answer 를 증가시키는 것.

예를 들어, 선수가 5명이라고 할 때, i = 1 번 선수의 시합 횟수가 4번이라면 모든 선수들과의 결과가 테이블에 기록되어있기 때문에 확실한 등수를 알 수 있기 때문에 1번 선수가 카운트 되는 식이다.

class Solution {

    static int[][] floyd;

    public int solution(int n, int[][] arr) {
        int answer = 0;
        floyd = new int[n][n];

        for (int i = 0; i < arr.length; i++) {
            int aPerson = arr[i][0];
            int bPerson = arr[i][1];

            floyd[aPerson - 1][bPerson - 1] = 1; // 행 사람이 열 사람을 이겼다라는 의미
        }

        for (int i = 0; i < n; i++) { // 중간
            for (int j = 0; j < n; j++) { // 시작
                for (int k = 0; k < n; k++) { // 끝

                    // 시작 ~ 중간, 중간 ~ 끝 을 모두 판단할 수 있는 경우 확실하게 등수를 결정지을 수 있다.
                    if (floyd[j][i] == 1 && floyd[i][k] == 1) {
                        floyd[j][k] = 1;
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            int result = 0; // 시합 횟수

            for (int j = 0; j < n; j++) {
            
            	// 행 기준이든 열 기준이든 1이라면 시합 결과가 있다는 소리니까
                if (floyd[i][j] == 1 || floyd[j][i] == 1) { 
                    result++; // 시합 횟수를 증가시킨다.
                }
            }

            if (result == n - 1) {
                answer++;
            }
        }


        return answer;
    }
}

